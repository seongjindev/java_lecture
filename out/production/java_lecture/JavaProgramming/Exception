예외처리
프로그램에 문제가 발생했을 때 시스템 동작에 문제가 없도록 사전에 예방하는 코드를 작성하는 방법에 대해서 학습합니다

예외란
    프로그램에 문제가 있는 것을 말하며, 예외로 인해 시스템 동작이 멈추는 것을 막는 것을 예외처리라고 한다
    Exception - 개발자가 대처할 수 있음
    Error - 개발자가 대처할 수 없음 - 하드웨어적 문제

    Checked Exception
        예외처리를 반드시 해야하는 경우(네트워크, 파일 시스템 등) - 컴파일조차 되지 않음

    Unchecked Exception
        예외처리를 개발자의 판단에 맞기는 경우(데이터 오류 등)

Exception 클래스
    Exception클래스 하위클래스로 NullPointerException, NumberFormatException 등이 있다
    NullPointerException - 객체를 가리키지 않고 있는 레퍼런스를 이용할 때
    ArrayIndexOutOfBoundException - 배열에서 존재하지 않는 인덱스를 가리킬 때
    NumberFormatException - 숫자 데이터에 문자데이터 등을 넣었을 때

try ~ catch
    개발자가 예외처리하기 가장 쉽고, 많이 사용되는 방법이다

다양한 예외처리
    Exception 및 하위 클래스를 이용해서 예외처리를 다양하게 할 수 있다

finally
    예외 발생 여부에 상관없이 반드시 실행된다

throws
    예외 발생 시 예외 처리를 직접 하지 않고 호출한 곳으로 넘긴다